# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.1.0 on Thu Jan 30 23:28:05 2025
#

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
from core.Domain.visualization_handler import VizualTCP, VizualWorkObj
# end wxGlade


class Position(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: Position.__init__
        self.parent = args[0]
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((775, 422))
        self.SetTitle("Position")

        sizer_pos = wx.BoxSizer(wx.VERTICAL)

        self.notebook_position = wx.Notebook(self, wx.ID_ANY)
        sizer_pos.Add(self.notebook_position, 1, wx.ALL | wx.EXPAND, 2)

        self.TCP_Position_tab = wx.Panel(self.notebook_position, wx.ID_ANY)
        self.notebook_position.AddPage(self.TCP_Position_tab, "TCP")

        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)

        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_4, 1, wx.EXPAND, 0)

        grid_sizer_2 = wx.GridSizer(2, 4, 0, 0)
        sizer_4.Add(grid_sizer_2, 0, wx.ALL | wx.EXPAND, 4)

        grid_sizer_2.Add((100, 20), 0, 0, 0)

        label_1 = wx.StaticText(self.TCP_Position_tab, wx.ID_ANY, "X")
        grid_sizer_2.Add(label_1, 0, wx.ALIGN_CENTER, 0)

        label_2 = wx.StaticText(self.TCP_Position_tab, wx.ID_ANY, "Y")
        grid_sizer_2.Add(label_2, 1, wx.ALIGN_CENTER, 0)

        label_3 = wx.StaticText(self.TCP_Position_tab, wx.ID_ANY, "Z")
        grid_sizer_2.Add(label_3, 1, wx.ALIGN_CENTER, 0)

        label_4 = wx.StaticText(self.TCP_Position_tab, wx.ID_ANY, u"Pozícia:")
        grid_sizer_2.Add(label_4, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 10)

        self.text_tcp_pos_x = wx.TextCtrl(self.TCP_Position_tab, wx.ID_ANY, "")
        grid_sizer_2.Add(self.text_tcp_pos_x, 1, wx.EXPAND | wx.LEFT, 4)

        self.text_tcp_pos_y = wx.TextCtrl(self.TCP_Position_tab, wx.ID_ANY, "")
        grid_sizer_2.Add(self.text_tcp_pos_y, 1, wx.EXPAND | wx.LEFT, 4)

        self.text_tcp_pos_z = wx.TextCtrl(self.TCP_Position_tab, wx.ID_ANY, "")
        grid_sizer_2.Add(self.text_tcp_pos_z, 1, wx.EXPAND | wx.LEFT, 4)

        grid_sizer_8 = wx.GridSizer(2, 4, 0, 0)
        sizer_4.Add(grid_sizer_8, 0, wx.ALL | wx.EXPAND, 4)

        grid_sizer_8.Add((100, 20), 0, 0, 0)

        label_5 = wx.StaticText(self.TCP_Position_tab, wx.ID_ANY, u"α")
        grid_sizer_8.Add(label_5, 0, wx.ALIGN_CENTER, 0)

        label_11 = wx.StaticText(self.TCP_Position_tab, wx.ID_ANY, u"β")
        grid_sizer_8.Add(label_11, 0, wx.ALIGN_CENTER, 0)

        label_13 = wx.StaticText(self.TCP_Position_tab, wx.ID_ANY, u"γ")
        grid_sizer_8.Add(label_13, 0, wx.ALIGN_CENTER, 0)

        label_12 = wx.StaticText(self.TCP_Position_tab, wx.ID_ANY, u"Orientácia:")
        grid_sizer_8.Add(label_12, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)

        self.text_tcp_orin_x = wx.TextCtrl(self.TCP_Position_tab, wx.ID_ANY, "")
        grid_sizer_8.Add(self.text_tcp_orin_x, 1, wx.EXPAND | wx.LEFT, 4)

        self.text_tcp_orin_y = wx.TextCtrl(self.TCP_Position_tab, wx.ID_ANY, "")
        grid_sizer_8.Add(self.text_tcp_orin_y, 1, wx.EXPAND | wx.LEFT, 4)

        self.text_tcp_orin_z = wx.TextCtrl(self.TCP_Position_tab, wx.ID_ANY, "")
        grid_sizer_8.Add(self.text_tcp_orin_z, 1, wx.EXPAND | wx.LEFT, 4)

        self.radio_box_tcp = wx.RadioBox(self.TCP_Position_tab, wx.ID_ANY, u"Pripravené nastavenia Orientácie", choices=self.parent.position_presets.get_tcp_preset_names(), majorDimension=1, style=wx.RA_SPECIFY_COLS)
        self.radio_box_tcp.SetSelection(0)
        sizer_4.Add(self.radio_box_tcp, 0, wx.ALL | wx.EXPAND, 5)

        self.window_vizual_tcp = VizualTCP(self.TCP_Position_tab, wx.ID_ANY)
        self.window_vizual_tcp.SetMinSize((330, 300))
        sizer_1.Add(self.window_vizual_tcp, 0, wx.ALL | wx.EXPAND, 5)

        self.notebook_1_pane_2 = wx.Panel(self.notebook_position, wx.ID_ANY)
        self.notebook_position.AddPage(self.notebook_1_pane_2, "WorkObj")

        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)

        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_5.Add(sizer_6, 1, wx.EXPAND, 0)

        grid_sizer_5 = wx.GridSizer(2, 4, 0, 0)
        sizer_6.Add(grid_sizer_5, 0, wx.ALL | wx.EXPAND, 4)

        grid_sizer_5.Add((100, 20), 0, 0, 0)

        label_6 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, "X")
        grid_sizer_5.Add(label_6, 0, wx.ALIGN_CENTER, 0)

        label_7 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, "Y")
        grid_sizer_5.Add(label_7, 0, wx.ALIGN_CENTER, 0)

        label_8 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, "Z")
        grid_sizer_5.Add(label_8, 0, wx.ALIGN_CENTER, 0)

        label_9 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, u"Pozícia:")
        grid_sizer_5.Add(label_9, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 10)

        self.text_workobj_pos_x = wx.TextCtrl(self.notebook_1_pane_2, wx.ID_ANY, "")
        grid_sizer_5.Add(self.text_workobj_pos_x, 1, wx.EXPAND | wx.LEFT, 4)

        self.text_workobj_pos_y = wx.TextCtrl(self.notebook_1_pane_2, wx.ID_ANY, "")
        grid_sizer_5.Add(self.text_workobj_pos_y, 1, wx.EXPAND | wx.LEFT, 4)

        self.text_workobj_pos_z = wx.TextCtrl(self.notebook_1_pane_2, wx.ID_ANY, "")
        grid_sizer_5.Add(self.text_workobj_pos_z, 1, wx.EXPAND | wx.LEFT, 4)

        grid_sizer_6 = wx.GridSizer(2, 4, 0, 0)
        sizer_6.Add(grid_sizer_6, 0, wx.ALL | wx.EXPAND, 4)

        grid_sizer_6.Add((100, 20), 0, 0, 0)

        label_14 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, u"α")
        grid_sizer_6.Add(label_14, 1, wx.ALIGN_CENTER, 0)

        label_15 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, u"β")
        grid_sizer_6.Add(label_15, 1, wx.ALIGN_CENTER, 0)

        label_16 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, u"γ")
        grid_sizer_6.Add(label_16, 1, wx.ALIGN_CENTER, 0)

        label_10 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, u"Orientácia:")
        grid_sizer_6.Add(label_10, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)

        self.text_workobj_orin_x = wx.TextCtrl(self.notebook_1_pane_2, wx.ID_ANY, "")
        grid_sizer_6.Add(self.text_workobj_orin_x, 1, wx.EXPAND | wx.LEFT, 4)

        self.text_workobj_orin_y = wx.TextCtrl(self.notebook_1_pane_2, wx.ID_ANY, "")
        grid_sizer_6.Add(self.text_workobj_orin_y, 1, wx.EXPAND | wx.LEFT, 4)

        self.text_workobj_orin_z = wx.TextCtrl(self.notebook_1_pane_2, wx.ID_ANY, "")
        grid_sizer_6.Add(self.text_workobj_orin_z, 1, wx.EXPAND | wx.LEFT, 4)

        self.radio_box_workobj = wx.RadioBox(self.notebook_1_pane_2, wx.ID_ANY, u"Pripravené nastavenia Orientácie", choices=self.parent.position_presets.get_workobj_preset_names(), majorDimension=1, style=wx.RA_SPECIFY_COLS)
        self.radio_box_workobj.SetSelection(0)
        sizer_6.Add(self.radio_box_workobj, 0, wx.ALL | wx.EXPAND, 5)

        self.window_vizual_workobj = VizualWorkObj(self.notebook_1_pane_2, wx.ID_ANY)
        self.window_vizual_workobj.SetMinSize((330, 300))
        sizer_5.Add(self.window_vizual_workobj, 0, wx.ALL | wx.EXPAND, 5)

        sizer_buttons = wx.StdDialogButtonSizer()
        sizer_pos.Add(sizer_buttons, 0, wx.ALIGN_RIGHT | wx.ALL, 4)

        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        self.button_CANCEL.SetDefault()
        sizer_buttons.AddButton(self.button_CANCEL)

        self.button_APPLY = wx.Button(self, wx.ID_OK, "")
        sizer_buttons.AddButton(self.button_APPLY)

        sizer_buttons.Realize()

        self.notebook_1_pane_2.SetSizer(sizer_5)

        self.TCP_Position_tab.SetSizer(sizer_1)

        self.SetSizer(sizer_pos)

        self.SetEscapeId(self.button_CANCEL.GetId())

        self.Layout()
        self.Centre()
        self.load_saved_settings()
        self.update_tcp_visualization()
        self.update_workobj_visualization()

        self.text_tcp_orin_x.Bind(wx.EVT_TEXT, self.on_tcp_orientation_change)
        self.text_tcp_orin_y.Bind(wx.EVT_TEXT, self.on_tcp_orientation_change)
        self.text_tcp_orin_z.Bind(wx.EVT_TEXT, self.on_tcp_orientation_change)

        self.text_workobj_orin_x.Bind(wx.EVT_TEXT, self.on_workobj_orientation_change)
        self.text_workobj_orin_y.Bind(wx.EVT_TEXT, self.on_workobj_orientation_change)
        self.text_workobj_orin_z.Bind(wx.EVT_TEXT, self.on_workobj_orientation_change)

        self.radio_box_tcp.Bind(wx.EVT_RADIOBOX, self.on_radio_box_tcp_change)
        self.radio_box_workobj.Bind(wx.EVT_RADIOBOX, self.on_radio_box_workobj_change)
        self.button_CANCEL.Bind(wx.EVT_BUTTON, self.cancel)
        self.button_APPLY.Bind(wx.EVT_BUTTON, self.save_position)
        # end wxGlade

    def load_saved_settings(self):
        tcp = self.parent.app_settings.get_tcp_object()
        workobj = self.parent.app_settings.get_work_object()
        orientation_presets = self.parent.app_settings.get_orientation_presets()

        self.text_tcp_pos_x.SetValue(str(tcp.position.x))
        self.text_tcp_pos_y.SetValue(str(tcp.position.y))
        self.text_tcp_pos_z.SetValue(str(tcp.position.z))

        self.text_tcp_orin_x.SetValue(str(tcp.orientation.euler.x))
        self.text_tcp_orin_y.SetValue(str(tcp.orientation.euler.y))
        self.text_tcp_orin_z.SetValue(str(tcp.orientation.euler.z))

        self.text_workobj_pos_x.SetValue(str(workobj.position.x))
        self.text_workobj_pos_y.SetValue(str(workobj.position.y))
        self.text_workobj_pos_z.SetValue(str(workobj.position.z))

        self.text_workobj_orin_x.SetValue(str(workobj.orientation.euler.x))
        self.text_workobj_orin_y.SetValue(str(workobj.orientation.euler.y))
        self.text_workobj_orin_z.SetValue(str(workobj.orientation.euler.z))

        tcp_preset = orientation_presets.tcp_preset
        workobj_preset = orientation_presets.workobj_preset

        if tcp_preset < len(self.parent.position_presets.get_tcp_preset_names()):
            self.radio_box_tcp.SetSelection(tcp_preset)
        if workobj_preset < len(self.parent.position_presets.get_workobj_preset_names()):
            self.radio_box_workobj.SetSelection(workobj_preset)

        self._toggle_tcp_inputs(tcp_preset == 0)
        self._toggle_workobj_inputs(workobj_preset == 0)

    def cancel(self, event):  # wxGlade: Position.<event_handler>
        self.EndModal(wx.ID_CANCEL)
        event.Skip()

    def save_position(self, event):  # wxGlade: Position.<event_handler>
        try:
            tcp_pos = f"{self.text_tcp_pos_x.GetValue()}, {self.text_tcp_pos_y.GetValue()}, {self.text_tcp_pos_z.GetValue()}"
            tcp_orient = f"{self.text_tcp_orin_x.GetValue()}, {self.text_tcp_orin_y.GetValue()}, {self.text_tcp_orin_z.GetValue()}"

            self.parent.app_settings.set_tcp_position(tcp_pos)
            self.parent.app_settings.set_tcp_orientation(tcp_orient)

            workobj_pos = f"{self.text_workobj_pos_x.GetValue()}, {self.text_workobj_pos_y.GetValue()}, {self.text_workobj_pos_z.GetValue()}"
            workobj_orient = f"{self.text_workobj_orin_x.GetValue()}, {self.text_workobj_orin_y.GetValue()}, {self.text_workobj_orin_z.GetValue()}"

            self.parent.app_settings.set_workobj_position(workobj_pos)
            self.parent.app_settings.set_workobj_orientation(workobj_orient)
            self.parent.app_settings.set_orientation_presets(self.radio_box_tcp.GetSelection(), self.radio_box_workobj.GetSelection())
            self.parent.save_settings()
            self.parent.update_status("Poloha bola nastavená", 100)
            self.EndModal(wx.ID_OK)
        except ValueError as e:
            wx.MessageBox(str(e), "Zadajte platné čísla", wx.OK | wx.ICON_ERROR)
            self.parent.update_status("Chyba nastavenia polohy", 0)
            return
        event.Skip()

    def on_tcp_orientation_change(self, event):
        self.update_tcp_visualization()
        event.Skip()

    def update_tcp_visualization(self):
        try:
            x = float(self.text_tcp_orin_x.GetValue() or 0)
            y = float(self.text_tcp_orin_y.GetValue() or 0)
            z = float(self.text_tcp_orin_z.GetValue() or 0)
            self.window_vizual_tcp.set_orientation((x, y, z))
        except ValueError:
            pass

    def on_radio_box_tcp_change(self, event):  # wxGlade: Position.<event_handler>
        selection = self.radio_box_tcp.GetSelection()

        if selection == 0:
            self._toggle_tcp_inputs(True)
        else:
            self._toggle_tcp_inputs(False)
            preset = self.parent.position_presets.get_tcp_preset(selection)
            if preset:
                x, y, z = preset.as_dict()
                self.text_tcp_orin_x.SetValue(x)
                self.text_tcp_orin_y.SetValue(y)
                self.text_tcp_orin_z.SetValue(z)
                self.update_tcp_visualization()
        event.Skip()

    def on_workobj_orientation_change(self, event):
        self.update_workobj_visualization()
        event.Skip()

    def update_workobj_visualization(self):
        try:
            x = float(self.text_workobj_orin_x.GetValue() or 0)
            y = float(self.text_workobj_orin_y.GetValue() or 0)
            z = float(self.text_workobj_orin_z.GetValue() or 0)
            self.window_vizual_workobj.set_orientation((x, y, z))
        except ValueError:
            pass

    def on_radio_box_workobj_change(self, event):  # wxGlade: Position.<event_handler>
        selection = self.radio_box_workobj.GetSelection()

        if selection == 0:
            self._toggle_workobj_inputs(True)
        else:
            self._toggle_workobj_inputs(False)
            preset = self.parent.position_presets.get_workobj_preset(selection)
            if preset:
                x, y, z = preset.as_dict()
                self.text_workobj_orin_x.SetValue(x)
                self.text_workobj_orin_y.SetValue(y)
                self.text_workobj_orin_z.SetValue(z)
        event.Skip()

    def _toggle_tcp_inputs(self, enable: bool) -> None:
        for ctrl in [self.text_tcp_orin_x, self.text_tcp_orin_y, self.text_tcp_orin_z]:
            ctrl.Enable(enable)

    def _toggle_workobj_inputs(self, enable: bool) -> None:
        for ctrl in [self.text_workobj_orin_x, self.text_workobj_orin_y, self.text_workobj_orin_z]:
            ctrl.Enable(enable)
# end of class Position
